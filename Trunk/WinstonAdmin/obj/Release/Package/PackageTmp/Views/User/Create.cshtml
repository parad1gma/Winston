@using Winston.Common;
@model IResponse<Winston.Models.UserCreateModel>

@{
    ViewBag.Title = "User";
}

<h2>User</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Create</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Value.Username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.Username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.Password, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                @Html.ValidationMessageFor(model => model.Value.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Value.Gender, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Value.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input name="Value.DateOfBirth" class="form-control text-box single-line" id="Value_DateOfBirth" type="text" >
                <span id="errorDateOfBirth" style="color:#a94442;" class="hidden"></span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.Street, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.Street, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.Street, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.StreetNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.StreetNumber, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                @Html.ValidationMessageFor(model => model.Value.StreetNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value.AdressInfo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value.AdressInfo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value.AdressInfo, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="submit" value="Create" class="btn btn-primary">Create</button>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>


        var dateformat = "@Globalization.Culture.DateTimeFormat.ShortDatePattern";

        switch (dateformat) {
            case "d.M.yyyy.":
                dateformat = "d.m.yyyy.";
                break;
            case "dd.MM.yyyy.":
                dateformat = "dd.mm.yyyy.";
                break;
            case "M/d/yyyy":
                dateformat = "m/d/yyyy";
                break;
            case "MM/dd/yyyy":
                dateformat = "mm/dd/yyyy";
                break;
            default:
                dateformat = "mm-dd-yyyy";
        }

        $("#Value_DateOfBirth")
        .prop("placeholder", dateformat.toUpperCase())
        .datepicker({
            format: dateformat
        })
        .on('changeDate', function (e) {
            $(this).datepicker('hide');
            $("#errorDateOfBirth").addClass("hidden");
        })
        .keydown(function () {
            $(this).datepicker('hide');
            $("#errorDateOfBirth").addClass("hidden");
        });


        $("#submit").click(function (e) {
            var validated = true;

            var username = $("#Value_Username").val();
            var password = $("#Value_Password").val();
            var gender = $("#Value_Gender").val();
            var firstname = $("#Value_FirstName").val();
            var lastname = $("#Value_LastName").val();
            var zipcode = $("#Value_ZipCode").val();
            var email = $("#Value_Email").val();
            var addressInfo = $("#Value_AdressInfo").val();
            var city = $("#Value_City").val();
            var street = $("#Value_Street").val();
            var streetNumber = $("#Value_StreetNumber").val();
            var dateOfBirth = $("#Value_DateOfBirth").val();



            var data = {

                Username: username,
                Password: password,
                Gender: gender,
                FirstName: firstname,
                LastName: lastname,
                ZipCode: zipcode,
                Email: email,
                AdressInfo: addressInfo,
                City: city,
                Street: street,
                StreetNumber: streetNumber,
                DateOfBirth: dateOfBirth

            };

            if (username == "" || password == "" ||
                firstname == "" || lastname == "" ||
                zipcode == "" || email == "" ||
                city == "" || street == "" || streetNumber == "") {
                validated = false;
            } else {
                e.preventDefault();
            };

            var dateOfBirthValid = moment(dateOfBirth, dateformat.toUpperCase(), true).isValid();
            if (dateOfBirth == "") {
                $("#errorDateOfBirth").text("The Date of Birth field is required.").removeClass("hidden");
                validated = false;
            } else {
                if (!dateOfBirthValid) {
                    $("#errorDateOfBirth").text("The Date of Birth must be a date.").removeClass("hidden");
                    validated = false;
                };
            };


            if (validated) {
                e.preventDefault();

                $.ajax({

                    url: '/User/Create',
                    type: 'post',
                    dataType: 'json',
                    data: data,
                    success: function (data) {
                        if (data.Message == null) {
                            bootbox.alert("User successfully created!!", function () {

                                setTimeout(window.location.href = ("/User/Index"), 2000);
                            });
                        }
                        else {
                            bootbox.alert(data.Message);
                            return false;
                        }
                    }
                });
            }

        });

    </script>


}

